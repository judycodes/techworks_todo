{"version":3,"sources":["components/ToDoTask.js","components/addTask.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ToDoTask","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editingModeInput","setState","editingMode","state","handleUpdate","event","preventDefault","edit","id","taskName","handleEditChange","target","value","todo","react_default","a","createElement","className","onSubmit","type","defaultValue","name","onChange","completed","completedStyling","bind","onClick","delete","Component","AddTaskForm","handleChange","_this$setState","defineProperty","handleSubmit","addTask","htmlFor","placeholder","ToDoList","newToDo","todos","concat","toConsumableArray","deleteTask","parseInt","filter","task","todosId","editTask","editedTaskName","updatedTodos","map","objectSpread","undefined","completedTodos","_this2","index","components_ToDoTask","key","App","List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10ca2683.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ToDoTask extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n//=======[STATE IN TODOTASK COMPONENT]============          \r\n        this.state = {\r\n            editingMode : false, \r\n            taskName : this.props.taskName \r\n        }\r\n    }\r\n\r\n//=======[EVENTS]============    \r\n    editingModeInput = () => { //toggles whether the edit input form displays\r\n        this.setState({ \r\n            editingMode : !this.state.editingMode\r\n        })\r\n    }\r\n\r\n    handleUpdate = (event) => {\r\n        event.preventDefault();\r\n        this.props.edit(this.props.id, this.state.taskName);\r\n        this.setState({\r\n            editingMode : false\r\n        })\r\n    }\r\n\r\n    handleEditChange = (event) => { //captures the changed task data\r\n        this.setState({\r\n            taskName : event.target.value\r\n        })\r\n    }  \r\n\r\n    \r\n//=======[RENDER]============      \r\n    render(){\r\n       \r\n        const todo = this.props.todo\r\n        //console.log('name of each task from todos in List.js passed to ToDoTask.js: ', todo.taskName) \r\n        // console.log('todo variable storing objects from todos in List.js passed to ToDoTask.js: ', todo.)  \r\n        //console.log(todo.completed, 'value of todo.completed currently')\r\n        let output; //what is displayed depending on this.state.editingMode condition\r\n\r\n        if(this.state.editingMode) { //if the editingMode property is true, then the edit form will appear and allow user to edit the input of the task already stored in todos array\r\n            output = (\r\n                <div>\r\n                    <form className = \"editForm\" onSubmit = {this.handleUpdate}>\r\n                        <input \r\n                            className = \"editInput\" \r\n                            type = \"text\" \r\n                            defaultValue ={todo.taskName}\r\n                            name = \"taskName\"\r\n                            onChange = {this.handleEditChange}/>\r\n                        <button type=\"submit\">Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {//if the edited property remains false, then the task will just display as usual\r\n           \r\n            output = ( //todo.completedStyling same as todo.completed?\r\n                <li className = {todo.completed ? 'completedStyle' : ''}> \r\n                {/* only if this.props.completed is true, then a css style will be applied. */}\r\n\r\n                    <input type=\"checkbox\" onChange={this.props.completedStyling.bind(this, this.props.id)} /> \r\n                    {/* above creates a checkbox for styling completing and uncompleted tasks \r\n                    .bind is needed so \"this\" keyword is not undefined\r\n                    this.props.id is passed so React knows which task is being changed*/}\r\n                        \r\n                    {todo.taskName} \r\n                    {/* display the taskName text value */}\r\n    \r\n                    <div className =\"btnGroup\">\r\n                        <button \r\n                            type=\"button\" \r\n                            onClick={this.props.delete} \r\n                            id={this.props.id}>Delete\r\n                        </button>\r\n                        \r\n                        <button \r\n                            type = \"button\" \r\n                            onClick={this.editingModeInput}>Edit\r\n                        </button> \r\n                    </div>\r\n                    {/* provides each task with a set of delete and edit button to trigger events */}\r\n                </li>\r\n            )\r\n        } \r\n        return output; \r\n    }   \r\n}    \r\n\r\nexport default ToDoTask;","import React, { Component } from 'react'\r\n\r\nclass AddTaskForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n//=======[STATE IN ADDTASKFORM COMPONENT]============          \r\n        this.state = {\r\n            taskName: \"\"\r\n        }\r\n    }\r\n\r\n//=======[EVENTS]============    \r\n    handleChange = event => { //captures the event data from input\r\n        this.setState({\r\n          [event.target.name] : event.target.value, //sets new value to taskName, using object literal syntax\r\n          completed: false //input is given this key and value, since this is a new task to be added to the list and is automatically not completed as of yet\r\n        }); \r\n      };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault(); //stops propogation\r\n        //refreshing the page is the default action on form submission \r\n        //console.log(\"addTask fires!\") //shows in console the addTask method being fired from the submission of form data\r\n        this.props.addTask(this.state); //passes in state object to allow for adding new task to list as newToDo\r\n        this.setState({\r\n            taskName : \"\"\r\n        }) //this clears the input form after adding new task\r\n    }  \r\n    \r\n//=======[RENDER]============    \r\n    render() {\r\n        return (\r\n            <form className = \"addForm\" onSubmit = {this.handleSubmit}>\r\n                <label htmlFor = \"taskName\">Task To Do: </label>\r\n                  <input \r\n                    name = \"taskName\" \r\n                    //form submitted data in an HTTP request is packaged as name-value pairs. The name for each name-value pair is the name attribute of each input, and the value is the user input value. Without the name attribute, <input> element cannot provide its value to the server upon form submission.\r\n                    //name attribute allows event.target.value to be the value of taskName from state, otherwise event.target.value would be set to an empty string when onChange occurs\r\n                    value = {this.state.taskName} \r\n                    onChange = {this.handleChange} //captures changes in input  \r\n                    type = \"text\" \r\n                    placeholder = \" Type Your Next Task Here!\" />\r\n                  <button type = \"submit\">Add Task</button>\r\n              </form>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default AddTaskForm;","import React, { Component } from 'react';\r\nimport ToDoTask from './ToDoTask';\r\nimport AddTaskForm from './addTask';\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n//=======[STATE IN TODOLIST COMPONENT]============          \r\n    this.state = { \r\n      todos: [ //tasks already in todo list\r\n        {\r\n          taskName : \"Wait for tonight\",\r\n          completed : false,\r\n        },\r\n        {\r\n          taskName : \"Try to take over the world\",\r\n          completed : false,  \r\n        },\r\n        {\r\n          taskName : \"Git Commit\",\r\n          completed : false,  \r\n        }\r\n      ],\r\n    }\r\n  }\r\n      \r\n//=======[METHODS]============\r\n  addTask = newToDo => { //add task method\r\n    //console.log(newToDo, 'newtodo') //newToDo is an object with taskName and input value, as well as completed: false key value, all of which are obtained from the addtaskform\r\n\r\n    if(newToDo.taskName !== \"\") { //as long as newToDo input is not an empty string, new task will be added to todos array\r\n      this.setState({\r\n        todos : [...this.state.todos, newToDo] //...this.state.todos spread operator copies existing todos array and adds the newToDo object to the todos array\r\n      }) //,() => console.log(this.state.todos, 'todos list') added after {} of setState({}) as a callback fn will display todos array with the new todo task included (at the same time the setState is reassigning)\r\n    }  \r\n  }\r\n\r\n  deleteTask = (event) => { //delete task method\r\n    // event contains data concerning the deleted/unwanted task\r\n    let id = parseInt(event.target.id); //changes id data captured in event from clicking delete button in ToDoTask.js into a number and storing that number in a variable\r\n    //console.log('deleteTask() accessed, ', id); //checks if method is accessed when clicked in ToDoTask.js and the event.target.id (known as variable id) is available to the deleteTask method.  \r\n    this.setState({\r\n      todos : this.state.todos.filter((task, todosId) => todosId !== id)// todosIndex is the individual id value of all tasks, task is used to represent each individual task/element in todos array\r\n      //filter task an element parameter and then an index parameter from array\r\n      //task represents each object element in todos array \r\n      //todosId represents each todo object's id\r\n      //todosId !== id is condition for filtering out data, meaning whatever does not match that specified id, which is event.target.id value, will be returned back in array. \r\n      //Only the task/element with the specified id value from event.target.id will be taken out of todos array. \r\n    }) \r\n    //console.log('this.state.todos after filtering', this.state.todos) // shows todos content leftover after deleting specific task\r\n  }\r\n\r\n  editTask = (id, editedTaskName) => { //edit task method\r\n          \r\n    const updatedTodos = this.state.todos.map((task, todosId) => { //creates a new array \r\n            \r\n      if(todosId === id) { //if the id from the handleUpdate event matches the task id \r\n        return {...task, taskName : editedTaskName} //overwrites taskName's original value to now be editedTaskName's  value\r\n      } //else\r\n        return task; //all the other tasks are returned unedited\r\n    })\r\n          \r\n    if(editedTaskName === undefined || editedTaskName === \"\") { //prevents changes to taskName if save button is pressed without any changes or is an empty string\r\n        return this.state.todos;\r\n    } else { //if taskName is changed, the todos array will be updated with the new array, updatedTodos\r\n        this.setState({\r\n          todos : updatedTodos //reassigns todos to be the new array with the edited data\r\n        }) \r\n      }\r\n          //console.log(editedTaskName, 'editedTaskName passed in editTask method') \r\n\r\n  }\r\n\r\n  completedStyling = (id) => { //method for applied completed css styling rules\r\n    //console.log(id, 'id for completedstyling') //id is passed up from the checked/changed checkbox \r\n    const completedTodos = this.state.todos.map((task, todosId) => {//creates a new array\r\n\r\n      if(todosId === id) { //compares the id of task that should have the completedStyling applied with each task's id\r\n        //if matched, then checks for the following:\r\n          \r\n        if(!this.state.todos.completed) {  //if completed property is not false(meaning true), then do the following: \r\n        // console.log(!this.state.todos.completed, '!false, since it's supposed by initialized as false, then not false means the property is true) //returns true\r\n        //console.log(this.state.todos[todosId].completed, 'initialized as false') //returns undefined if not accessing specificed task, needs [todosId] after this.state.todos and before .completed in order to toggle between false and true\r\n        //console.log(!task.completed, 'task.completed') //changes as specified checkbox is checked and unchecked (if checkbox is checked, then task.completed is true, else it is false)\r\n\r\n          return {...task, completed : !task.completed} //copies specified task properties, toggles and reassigns completed property only\r\n                \r\n        } \r\n      } //else if the task id doesn't match\r\n            \r\n          return task; //all other tasks returned with completed property unchanged\r\n    })\r\n          \r\n    this.setState({ //once the above is done, state is updated/rerendered to show changes, if there are any\r\n      todos: completedTodos //reassigns todos to completedTodos array to render the completed task(s) with the rest uncompleted and unaffected\r\n    })\r\n  }\r\n         \r\n//=======[RENDER]============      \r\n  render(){\r\n\r\n    //console.log(this.state.todos, 'todos array, useful for checking changes from edit, delete, checkbox changes')\r\n      \r\n    const todos = this.state.todos.map((todo, index) => { \r\n      //.map allows two parameters, (in this case, one task/todo from the todos list/array) an element and an index {.map gives an automatic index value which is later set to id attribute}\r\n      //mapping the todos array returns a ToDoTask component to represent each task in the todos array and provides an index for each task. \r\n\r\n      return (\r\n        <ToDoTask \r\n          todo = {todo} //allows access to each todo object(task) in todos array\r\n          key = {index} //resolves warning: Each child in a list should have a unique \"key\" prop.\r\n          id = {index} //provides id for each task, which is needed for deleting and editing tasks\r\n          completedStyling = {this.completedStyling} //allows access to completedStyling method\r\n          delete = {this.deleteTask} //allows access to deleteTask method \r\n          edit = {this.editTask} //allows access to editTask method\r\n          /> \r\n      )\r\n    }) \r\n     \r\n      return(\r\n        <div className = \"container\">\r\n\r\n          <div className = \"parts\" >\r\n          \r\n            <h1 className= \"title\">To Do List</h1>\r\n          \r\n            <AddTaskForm addTask = {this.addTask}/>  \r\n            {/* AddTaskForm component contains the input form for adding new tasks, as the name suggests\r\n            //addTask = {this.addTask} is passed as props so that addTask.js can access the addTask method in List.js \r\n            //input form in addTask.js passes up the data addTask method needs \r\n            */}\r\n\r\n            <ul className = \"list\">\r\n              \r\n              {todos} \r\n              {/* variable containing the mapped todos, lines 86-100 */}\r\n\r\n            </ul>\r\n          \r\n          </div>\r\n\r\n        </div>  \r\n      ); \r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { Component } from 'react';\nimport ToDoList from './components/List';\n\nclass App extends Component {\n  \n  render(){\n    return (\n      <ToDoList />\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}